services:
  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      ports:
        - "3000:3000"
      depends_on:
        - backend
      environment:
        - NODE_ENV=production
      # Frontend will use its own .env file during build

  backend:
      build:
        context: ./backend
        dockerfile: Dockerfile
      ports:
        - "8000:8000"
      environment:
        - PYTHONPATH=/app/src
        - PYTHONUNBUFFERED=1
        - ENVIRONMENT=production
        - DEBUG=False
        # Backend environment variables from .env files
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - MONGODB_URL=${MONGODB_URL}
        - SECRET_KEY=${SECRET_KEY}
        - GOOGLE_CSE_ID=${GOOGLE_CSE_ID}
        - GOOGLE_API_KEY=${GOOGLE_API_KEY}
        - SERPER_API_KEY=${SERPER_API_KEY}
        - GROQ_API_KEY=${GROQ_API_KEY}
        - GROK_API_KEY=${GROK_API_KEY}
        - VITE_API_URL=${VITE_API_URL}
        - SYSTEM_EMAIL=${SYSTEM_EMAIL}
        - SMTP_HOST=${SMTP_HOST}
        - SMTP_PORT=${SMTP_PORT}
        - SMTP_USERNAME=${SMTP_USERNAME}
        - SMTP_PASSWORD=${SMTP_PASSWORD}
        - SMTP_USE_TLS=${SMTP_USE_TLS}
      volumes:
        - backend_data:/data
        - ./backend/data:/app/data
        # Mount root .env file for additional configuration
        - ./.env:/app/.env.root:ro
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s

  mongodb:
      image: mongo:7-jammy
      ports:
        - "27017:27017"
      command: mongod --noauth
      volumes:
        - mongodb_data:/data/db
      healthcheck:
        test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s

volumes:
  mongodb_data:
  backend_data:
